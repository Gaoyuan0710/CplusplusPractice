{"name":"Justfun","tagline":"Some basic operatios of GitHub","body":"# 版本控制与Git\r\n@[西邮Linux兴趣小组][高源 ]\r\n####名词解释是\r\n**Git** :是一种分布式版本控制系统.\r\n**版本控制系统**: 本控制透过文档控制（documentation control）记录程序各个模组的改动，并为每次改动编上序号。这种方法是工程图（engineering drawings）维护（maintenance）的标准做法， 它伴随着工程图从图的诞生一直到图的定型。 版本控制透过文档控制（documentation control）记录程序各个模组的改动，并为每次改动编上序号。这种方法是工程图（engineering drawings）维护（maintenance）的标准做法， 它伴随着工程图从图的诞生一直到图的定。 一种简单的版本控制形式，例如，赋给图的初版一个版本等级“A”。当做了第一次改变后，版本等级改为“B”，以此类推等等。\r\n*版本控制分为*:集中式版本控制系统:CVS及SVN分布式版本控制系统:Git\r\n**版本仓库:** 版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\r\n**工作区（Working Directory）**：就是你在电脑里能看到的目录.\r\n**版本库（Repository）**：工作区有一个隐藏目录“.git”，这个不算工作区，而是Git的版本库。Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。\r\n####Git破壳记\r\n- **2005年4月3日** ：Linux决定开发Git\r\n- **2005年4月6日** ：Git项目正式在开源社区发布\r\n- **2005年4月7日** ：Git此时就已经能作为自己的项目管理工具了\r\n- **2005年4月18日**：Git产生第一个多分支合并\r\n- **2005年4月29日**：Git的性能到达了Linux的预期\r\n- **2005年6月16日**：linux内核2.6.12发布，此时的Git已经作为内核的版本控制工具了\r\n- *。。此处略去N个字。。。\r\n\r\n####安装\r\n>Debian系\r\n               **apt-get install git**\r\n>Redhat系\r\n             **  yum install git**\r\n                \r\n####配置\r\n\r\n> \r\n首先在本地创建ssh key：\r\n>>ssh-keygen -t rsa -C \"你的邮箱\"  \r\n\r\n> 之后会要求确认路径和输入密码，采取默认就可以，一路回车。成功后就会在～/下生成.ssh文件，进入后复制id_rsa.pub里面的key.进入github,在账户设置里选择Add ssh keys，根据自己情况填入Titile.\r\n其次设置user.name和user.email\r\n>>**git config  --global  usr.name 用户名**\r\n>>**git config  --global  user.email 用户邮箱**\r\n\r\n\r\n####创建新仓库\r\n>方法1：\r\n        git init 仓库名称\r\n>方法2：\r\n        mkdir 仓库名称\r\n        cd 仓库名称\r\n        git init\r\n\r\n>**～添加远程仓库路经：**\r\n        git remote add origin git@github.com:Your GitHub'name/Your repository'name.git\r\n**～提交给远程仓库：**\r\n        git push -u origin master\r\n**~从远程库克隆:**\r\n        git@github.com:Your GitHub'name/Your repository'name.git\r\n加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\r\n\r\n####添加与提交\r\n>**～添加到暂存区：**\r\n        git add <文件名称>\r\n**～提交到版本库：**\r\n        git commt -m “标注\"   //-m后面输入的是本次提交的说明，可以输入任意内容\r\n**~命令显示从最近到最远的提交日志**\r\n        git log\r\n        git reflog \r\n**~显示仓库当前状态：**\r\n        git status\r\n\r\n####版本恢复\r\n>**~将当前的分支重设到指定的分支**\r\n        git reset \r\n参数\r\n    --hard  重设（reset） index和working directory，自从<commit>以来在working directory中的任何改变都被丢弃，并把HEAD指向<commit>\r\n     --soft：index和working directory中的内容不作任何改变，仅仅把HEAD指向<commit>。这个模式的效果是，执行完毕后，自从<commit>以来的所有改变都会显示在git status的\"Changes to be committed\"中\r\n     --mixed：仅reset index，但是不reset working directory。这个模式是默认模式，即当不显示告知git reset模式时，会使用mixed模式。这个模式的效果是，working directory中文件的修改都会被保留，不会丢弃，但是也不会被标记成\"Changes to be committed\"，但是会打出什么还未被更新的报告\r\n     --merge\r\n\r\n#####git checkout --文件名 //丢弃工作区的修改\r\n#####git checkout 名称  //切换的分支\r\n\r\n####创建与合并分支\r\n\r\n>**查看分支： ** \r\n            git branch\r\n**创建分支**：\r\n            git branch name\r\n**切换分支**： \r\n            git checkout name\r\n**创建+切换分支： **\r\n            git checkout -b name\r\n**合并某分支到当前分支：**\r\n            git merge name\r\n**删除分支：**\r\n            git branch -d name\r\n\r\n####解决冲突\r\n>**将分支合并到当前分支**\r\n            git merge \r\n**查看分支合并图**\r\n            git log --graph\r\n            \r\n            \r\n###演示","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}